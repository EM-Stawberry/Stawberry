// Code generated by MockGen. DO NOT EDIT.
// Source: store_test.go
//
// Generated by this command:
//
//	mockgen -source=store_test.go -destination=mocks/RepositoryStore.go -package=mocks RepositoryStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	user "github.com/EM-Stawberry/Stawberry/internal/domain/service/user"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryStore is a mock of RepositoryStore interface.
type MockRepositoryStore struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryStoreMockRecorder
	isgomock struct{}
}

// MockRepositoryStoreMockRecorder is the mock recorder for MockRepositoryStore.
type MockRepositoryStoreMockRecorder struct {
	mock *MockRepositoryStore
}

// NewMockRepositoryStore creates a new mock instance.
func NewMockRepositoryStore(ctrl *gomock.Controller) *MockRepositoryStore {
	mock := &MockRepositoryStore{ctrl: ctrl}
	mock.recorder = &MockRepositoryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryStore) EXPECT() *MockRepositoryStoreMockRecorder {
	return m.recorder
}

// InsertStore mocks base method.
func (m *MockRepositoryStore) InsertStore(ctx context.Context, store user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertStore", ctx, store)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertStore indicates an expected call of InsertStore.
func (mr *MockRepositoryStoreMockRecorder) InsertStore(ctx, store any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertStore", reflect.TypeOf((*MockRepositoryStore)(nil).InsertStore), ctx, store)
}

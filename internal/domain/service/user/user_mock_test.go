// Code generated by MockGen. DO NOT EDIT.
// Source: user.go
//
// Generated by this command:
//
//	mockgen -source=user.go -destination=user_mock_test.go -package=user Repository, TokenService
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	entity "github.com/zuzaaa-dev/stawberry/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(ctx context.Context, email string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockRepository) GetUserByID(ctx context.Context, id uint) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepository)(nil).GetUserByID), ctx, id)
}

// InsertUser mocks base method.
func (m *MockRepository) InsertUser(ctx context.Context, user User) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, user)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockRepositoryMockRecorder) InsertUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockRepository)(nil).InsertUser), ctx, user)
}

// UpdateUser mocks base method.
func (m *MockRepository) UpdateUser(ctx context.Context, user User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryMockRecorder) UpdateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepository)(nil).UpdateUser), ctx, user)
}

// MockTokenService is a mock of TokenService interface.
type MockTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceMockRecorder
	isgomock struct{}
}

// MockTokenServiceMockRecorder is the mock recorder for MockTokenService.
type MockTokenServiceMockRecorder struct {
	mock *MockTokenService
}

// NewMockTokenService creates a new mock instance.
func NewMockTokenService(ctrl *gomock.Controller) *MockTokenService {
	mock := &MockTokenService{ctrl: ctrl}
	mock.recorder = &MockTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenService) EXPECT() *MockTokenServiceMockRecorder {
	return m.recorder
}

// GenerateTokens mocks base method.
func (m *MockTokenService) GenerateTokens(ctx context.Context, fingerprint string, userID uint) (string, entity.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokens", ctx, fingerprint, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entity.RefreshToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateTokens indicates an expected call of GenerateTokens.
func (mr *MockTokenServiceMockRecorder) GenerateTokens(ctx, fingerprint, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokens", reflect.TypeOf((*MockTokenService)(nil).GenerateTokens), ctx, fingerprint, userID)
}

// GetActivesTokenByUserID mocks base method.
func (m *MockTokenService) GetActivesTokenByUserID(ctx context.Context, userID uint) ([]entity.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivesTokenByUserID", ctx, userID)
	ret0, _ := ret[0].([]entity.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivesTokenByUserID indicates an expected call of GetActivesTokenByUserID.
func (mr *MockTokenServiceMockRecorder) GetActivesTokenByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivesTokenByUserID", reflect.TypeOf((*MockTokenService)(nil).GetActivesTokenByUserID), ctx, userID)
}

// GetByUUID mocks base method.
func (m *MockTokenService) GetByUUID(ctx context.Context, uuid string) (entity.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUUID", ctx, uuid)
	ret0, _ := ret[0].(entity.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUUID indicates an expected call of GetByUUID.
func (mr *MockTokenServiceMockRecorder) GetByUUID(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUUID", reflect.TypeOf((*MockTokenService)(nil).GetByUUID), ctx, uuid)
}

// InsertToken mocks base method.
func (m *MockTokenService) InsertToken(ctx context.Context, token entity.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertToken indicates an expected call of InsertToken.
func (mr *MockTokenServiceMockRecorder) InsertToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertToken", reflect.TypeOf((*MockTokenService)(nil).InsertToken), ctx, token)
}

// RevokeActivesByUserID mocks base method.
func (m *MockTokenService) RevokeActivesByUserID(ctx context.Context, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeActivesByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeActivesByUserID indicates an expected call of RevokeActivesByUserID.
func (mr *MockTokenServiceMockRecorder) RevokeActivesByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeActivesByUserID", reflect.TypeOf((*MockTokenService)(nil).RevokeActivesByUserID), ctx, userID)
}

// Update mocks base method.
func (m *MockTokenService) Update(ctx context.Context, refresh entity.RefreshToken) (entity.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, refresh)
	ret0, _ := ret[0].(entity.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTokenServiceMockRecorder) Update(ctx, refresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTokenService)(nil).Update), ctx, refresh)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/reviews/product_reviews.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/EM-Stawberry/Stawberry/internal/domain/entity"
)

// MockProductReviewRepository is a mock of ProductReviewRepository interface.
type MockProductReviewRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductReviewRepositoryMockRecorder
}

// MockProductReviewRepositoryMockRecorder is the mock recorder for MockProductReviewRepository.
type MockProductReviewRepositoryMockRecorder struct {
	mock *MockProductReviewRepository
}

// NewMockProductReviewRepository creates a new mock instance.
func NewMockProductReviewRepository(ctrl *gomock.Controller) *MockProductReviewRepository {
	mock := &MockProductReviewRepository{ctrl: ctrl}
	mock.recorder = &MockProductReviewRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductReviewRepository) EXPECT() *MockProductReviewRepositoryMockRecorder {
	return m.recorder
}

// AddReview mocks base method.
func (m *MockProductReviewRepository) AddReview(ctx context.Context, productID, userID, rating int, review string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", ctx, productID, userID, rating, review)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReview indicates an expected call of AddReview.
func (mr *MockProductReviewRepositoryMockRecorder) AddReview(ctx, productID, userID, rating, review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockProductReviewRepository)(nil).AddReview), ctx, productID, userID, rating, review)
}

// GetProductByID mocks base method.
func (m *MockProductReviewRepository) GetProductByID(ctx context.Context, productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductReviewRepositoryMockRecorder) GetProductByID(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProductReviewRepository)(nil).GetProductByID), ctx, productID)
}

// GetReviewsByProductID mocks base method.
func (m *MockProductReviewRepository) GetReviewsByProductID(ctx context.Context, productID int) ([]entity.ProductReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByProductID", ctx, productID)
	ret0, _ := ret[0].([]entity.ProductReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByProductID indicates an expected call of GetReviewsByProductID.
func (mr *MockProductReviewRepositoryMockRecorder) GetReviewsByProductID(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByProductID", reflect.TypeOf((*MockProductReviewRepository)(nil).GetReviewsByProductID), ctx, productID)
}

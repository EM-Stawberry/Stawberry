// Code generated by MockGen. DO NOT EDIT.
// Source: token.go
//
// Generated by this command:
//
//	mockgen -source=token.go -destination=token_mock_test.go -package=token Repository
//

// Package token is a generated GoMock package.
package token

import (
	context "context"
	reflect "reflect"

	entity "github.com/EM-Stawberry/Stawberry/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetActivesTokenByUserID mocks base method.
func (m *MockRepository) GetActivesTokenByUserID(ctx context.Context, userID uint) ([]entity.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivesTokenByUserID", ctx, userID)
	ret0, _ := ret[0].([]entity.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivesTokenByUserID indicates an expected call of GetActivesTokenByUserID.
func (mr *MockRepositoryMockRecorder) GetActivesTokenByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivesTokenByUserID", reflect.TypeOf((*MockRepository)(nil).GetActivesTokenByUserID), ctx, userID)
}

// GetByUUID mocks base method.
func (m *MockRepository) GetByUUID(ctx context.Context, uuid string) (entity.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUUID", ctx, uuid)
	ret0, _ := ret[0].(entity.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUUID indicates an expected call of GetByUUID.
func (mr *MockRepositoryMockRecorder) GetByUUID(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUUID", reflect.TypeOf((*MockRepository)(nil).GetByUUID), ctx, uuid)
}

// InsertToken mocks base method.
func (m *MockRepository) InsertToken(ctx context.Context, token entity.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertToken indicates an expected call of InsertToken.
func (mr *MockRepositoryMockRecorder) InsertToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertToken", reflect.TypeOf((*MockRepository)(nil).InsertToken), ctx, token)
}

// RevokeActivesByUserID mocks base method.
func (m *MockRepository) RevokeActivesByUserID(ctx context.Context, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeActivesByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeActivesByUserID indicates an expected call of RevokeActivesByUserID.
func (mr *MockRepositoryMockRecorder) RevokeActivesByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeActivesByUserID", reflect.TypeOf((*MockRepository)(nil).RevokeActivesByUserID), ctx, userID)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, refresh entity.RefreshToken) (entity.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, refresh)
	ret0, _ := ret[0].(entity.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, refresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, refresh)
}

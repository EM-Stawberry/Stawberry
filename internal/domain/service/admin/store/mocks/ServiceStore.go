// Code generated by MockGen. DO NOT EDIT.
// Source: store_test.go
//
// Generated by this command:
//
//	mockgen -source=store_test.go -destination=mocks/ServiceStore.go -package=mocks ServiceStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	user "github.com/EM-Stawberry/Stawberry/internal/domain/service/user"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceStore is a mock of ServiceStore interface.
type MockServiceStore struct {
	ctrl     *gomock.Controller
	recorder *MockServiceStoreMockRecorder
	isgomock struct{}
}

// MockServiceStoreMockRecorder is the mock recorder for MockServiceStore.
type MockServiceStoreMockRecorder struct {
	mock *MockServiceStore
}

// NewMockServiceStore creates a new mock instance.
func NewMockServiceStore(ctrl *gomock.Controller) *MockServiceStore {
	mock := &MockServiceStore{ctrl: ctrl}
	mock.recorder = &MockServiceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceStore) EXPECT() *MockServiceStoreMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockServiceStore) CreateUser(ctx context.Context, arg1 user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceStoreMockRecorder) CreateUser(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockServiceStore)(nil).CreateUser), ctx, arg1)
}

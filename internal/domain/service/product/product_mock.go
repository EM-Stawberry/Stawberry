// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/product/product.go

// Package product is a generated GoMock package.
package product

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/zuzaaa-dev/stawberry/internal/domain/entity"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetProductByID mocks base method.
func (m *MockRepository) GetProductByID(ctx context.Context, id string) (entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, id)
	ret0, _ := ret[0].(entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockRepositoryMockRecorder) GetProductByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockRepository)(nil).GetProductByID), ctx, id)
}

// InsertProduct mocks base method.
func (m *MockRepository) InsertProduct(ctx context.Context, product Product) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProduct", ctx, product)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertProduct indicates an expected call of InsertProduct.
func (mr *MockRepositoryMockRecorder) InsertProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProduct", reflect.TypeOf((*MockRepository)(nil).InsertProduct), ctx, product)
}

// SelectProducts mocks base method.
func (m *MockRepository) SelectProducts(ctx context.Context, offset, limit int) ([]entity.Product, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectProducts", ctx, offset, limit)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SelectProducts indicates an expected call of SelectProducts.
func (mr *MockRepositoryMockRecorder) SelectProducts(ctx, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectProducts", reflect.TypeOf((*MockRepository)(nil).SelectProducts), ctx, offset, limit)
}

// SelectProductsByCategoryID mocks base method.
func (m *MockRepository) SelectProductsByCategoryID(ctx context.Context, categoryID string, offset, limit int) ([]entity.Product, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectProductsByCategoryID", ctx, categoryID, offset, limit)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SelectProductsByCategoryID indicates an expected call of SelectProductsByCategoryID.
func (mr *MockRepositoryMockRecorder) SelectProductsByCategoryID(ctx, categoryID, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectProductsByCategoryID", reflect.TypeOf((*MockRepository)(nil).SelectProductsByCategoryID), ctx, categoryID, offset, limit)
}

// SelectProductsByName mocks base method.
func (m *MockRepository) SelectProductsByName(ctx context.Context, name string, offset, limit int) ([]entity.Product, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectProductsByName", ctx, name, offset, limit)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SelectProductsByName indicates an expected call of SelectProductsByName.
func (mr *MockRepositoryMockRecorder) SelectProductsByName(ctx, name, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectProductsByName", reflect.TypeOf((*MockRepository)(nil).SelectProductsByName), ctx, name, offset, limit)
}

// SelectStoreProducts mocks base method.
func (m *MockRepository) SelectStoreProducts(ctx context.Context, id string, offset, limit int) ([]entity.Product, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectStoreProducts", ctx, id, offset, limit)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SelectStoreProducts indicates an expected call of SelectStoreProducts.
func (mr *MockRepositoryMockRecorder) SelectStoreProducts(ctx, id, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectStoreProducts", reflect.TypeOf((*MockRepository)(nil).SelectStoreProducts), ctx, id, offset, limit)
}

// UpdateProduct mocks base method.
func (m *MockRepository) UpdateProduct(ctx context.Context, id string, update UpdateProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, id, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockRepositoryMockRecorder) UpdateProduct(ctx, id, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockRepository)(nil).UpdateProduct), ctx, id, update)
}
